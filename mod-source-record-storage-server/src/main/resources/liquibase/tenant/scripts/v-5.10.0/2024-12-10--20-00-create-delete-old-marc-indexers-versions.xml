<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.0.xsd">


  <changeSet id="2024-12-10--17-00-update-function-insert_marc_indexers" author="Volodymyr_Rohach">
    <sql splitStatements="false">
      create or replace function ${database.defaultSchemaName}.insert_marc_indexers()
      returns trigger
      as
      $insert_marc_indexers$
      declare
      result integer;
      begin
          if (TG_OP = 'INSERT') then
              insert into ${database.defaultSchemaName}.marc_records_tracking(marc_id, version, is_dirty) values (NEW.id, 0, false);
      result = 0;
          elsif (TG_OP = 'UPDATE') then
      update ${database.defaultSchemaName}.marc_records_tracking set version = version + 1,
                                                                     is_dirty = true
      where marc_id = NEW.id
        returning version into result;
      delete from ${database.defaultSchemaName}.marc_indexers_leader where marc_id = NEW.id;
      end if;
          perform ${database.defaultSchemaName}.fill_in_marc_indexers(NEW.id, NEW.content, result);
      return NEW;
      end;
      $insert_marc_indexers$ language plpgsql;
    </sql>
  </changeSet>

  <changeSet id="2024-12-10--17-00-create-delete-old-marc-indexers-versions-v2" author="Aliaksandr_Fedasiuk">
    <sql>
      DROP PROCEDURE IF EXISTS ${database.defaultSchemaName}.delete_old_marc_indexers_versions;
    </sql>
    <createProcedure>
      CREATE OR REPLACE PROCEDURE ${database.defaultSchemaName}.delete_old_marc_indexers_versions(IN pLimit INTEGER) LANGUAGE plpgsql AS $$
      BEGIN
        WITH dirty_records AS MATERIALIZED (
          SELECT mrt.marc_id, mrt.version
          FROM marc_records_tracking mrt
          WHERE mrt.is_dirty = true
          LIMIT pLimit
        ),
        deleted_dirty AS (
          DELETE FROM marc_indexers mi
            USING dirty_records dr
          WHERE mi.marc_id = dr.marc_id AND dr.version > mi.version
          RETURNING mi.marc_id
        ),
        old_records AS MATERIALIZED (
          SELECT ot.marc_id
          FROM old_records_tracking ot
          WHERE ot.has_been_processed = false
          LIMIT pLimit
        ),
        deleted_old AS (
          DELETE FROM marc_indexers mi
            USING old_records ors
          WHERE mi.marc_id = ors.marc_id
          RETURNING mi.marc_id
        ),
        combined_deletions AS MATERIALIZED (
          SELECT marc_id FROM dirty_records
          UNION
          SELECT marc_id FROM old_records
        ),
        update_old_records AS (
          UPDATE old_records_tracking
          SET has_been_processed = true
          WHERE marc_id IN (SELECT marc_id FROM combined_deletions)
          RETURNING marc_id
        )
        UPDATE marc_records_tracking
        SET is_dirty = false
        WHERE marc_id IN (SELECT marc_id FROM combined_deletions);
      RETURN;
      END $$;
    </createProcedure>
  </changeSet>

  <changeSet id="2024-12-10--17-00-create-index-on-is-dirty-true" author="Volodymyr_Rohach">
    <sql>
      CREATE INDEX IF NOT EXISTS idx_marc_records_tracking_dirty_true ON ${database.defaultSchemaName}.marc_records_tracking (is_dirty, marc_id, version) WHERE is_dirty = true;
    </sql>
  </changeSet>
</databaseChangeLog>
